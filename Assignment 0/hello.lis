     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Begin Assembly".  This program serves as a model for new programmers of X86 programming language.  This     *
     3                                  ;shows the standard layout of a function written in X86 assembly.  The program is a live example of how to complie,         *
     4                                  ;assembly, link, and execute a program containing source code written in X86.  Copyright (C) 2024  Floyd Holliday.          *
     5                                  ;                                                                                                                           *
     6                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     7                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     8                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     9                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    10                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    11                                  ;****************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;Author information
    18                                  ;  Author name: Floyd Holliday
    19                                  ;  Author email: holliday@fullerton.edu
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Begin Assembly
    23                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    24                                  ;  Date program began: 2024-Jan-5
    25                                  ;  Date of last update: 2024-Apr-22
    26                                  ;  Files in this program: beginhere.c, helloworld.asm, r.sh.  At a future date rg.sh may be added.
    27                                  ;  Testing: Alpha testing completed.  All functions are correct.
    28                                  ;  Status: Ready for release to customers
    29                                  ;
    30                                  ;Purpose
    31                                  ;  This program is a starting point for those learning to program in x86 assembly. 
    32                                  ;
    33                                  ;This file:
    34                                  ;  File name: helloword.asm
    35                                  ;  Language: X86-64
    36                                  ;  Max page width: 124 columns
    37                                  ;  Assemble (standard): nasm -l hello.lis -o hello.o helloworld.asm
    38                                  ;  Assemble (debug): nasm -g dwarf -l hello.lis -o hello.o helloworld.asm
    39                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    40                                  ;  Prototype of this function: unsigned long helloword();
    41                                  ; 
    42                                  ;
    43                                  ;
    44                                  ;
    45                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    46                                  
    47                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    48                                  ;not have its own place of declaration
    49                                  
    50                                  extern printf
    51                                  
    52                                  extern fgets
    53                                  
    54                                  extern stdin
    55                                  
    56                                  extern strlen
    57                                  
    58                                  global helloworld
    59                                  
    60                                  name_string_size equ 48
    61                                  
    62                                  segment .data
    63                                  ;This section (or segment) is for declaring initialized arrays
    64                                  
    65 00000000 5468652066756E6374-     welcome db "The function 'hello world' written in x86 assembly has begun", 10, 0
    65 00000009 696F6E202768656C6C-
    65 00000012 6F20776F726C642720-
    65 0000001B 7772697474656E2069-
    65 00000024 6E2078383620617373-
    65 0000002D 656D626C7920686173-
    65 00000036 20626567756E0A00   
    66 0000003E 506C6561736520656E-     prompt_for_name db "Please enter your first name, last name, and other names if available: ",0
    66 00000047 74657220796F757220-
    66 00000050 6669727374206E616D-
    66 00000059 652C206C617374206E-
    66 00000062 616D652C20616E6420-
    66 0000006B 6F74686572206E616D-
    66 00000074 657320696620617661-
    66 0000007D 696C61626C653A2000 
    67 00000086 57656C636F6D652074-     friendly_message db "Welcome to assembly programming %s.  May you enjoy it as much as Kathleen Booth did.",10,0
    67 0000008F 6F20617373656D626C-
    67 00000098 792070726F6772616D-
    67 000000A1 6D696E672025732E20-
    67 000000AA 204D617920796F7520-
    67 000000B3 656E6A6F7920697420-
    67 000000BC 6173206D7563682061-
    67 000000C5 73204B6174686C6565-
    67 000000CE 6E20426F6F74682064-
    67 000000D7 69642E0A00         
    68                                  
    69                                  segment .bss
    70                                  ;This section (or segment) is for declaring empty arrays
    71                                  
    72                                  align 64
    73 00000000 <res 340h>              backup_storage_area resb 832
    74                                  
    75 00000340 <res 30h>               user_name resb name_string_size
    76                                  
    77                                  segment .text
    78                                  
    79                                  helloworld:
    80                                  
    81                                  ;Back up the GPRs (General Purpose Registers)
    82 00000000 55                      push rbp
    83 00000001 4889E5                  mov rbp, rsp
    84 00000004 53                      push rbx
    85 00000005 51                      push rcx
    86 00000006 52                      push rdx
    87 00000007 57                      push rdi
    88 00000008 56                      push rsi
    89 00000009 4150                    push r8
    90 0000000B 4151                    push r9
    91 0000000D 4152                    push r10
    92 0000000F 4153                    push r11
    93 00000011 4154                    push r12
    94 00000013 4155                    push r13
    95 00000015 4156                    push r14
    96 00000017 4157                    push r15
    97 00000019 9C                      pushf
    98                                  
    99                                  ;Backup the registers other than the GPRs
   100 0000001A B807000000              mov rax,7
   101 0000001F BA00000000              mov rdx,0
   102 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   103                                  
   104                                  ;Output a welcome for the user
   105 0000002C B800000000              mov rax, 0
   106 00000031 48BF-                   mov rdi, welcome
   106 00000033 [0000000000000000] 
   107 0000003B E8(00000000)            call printf
   108                                  
   109                                  ;Output instruction for the user
   110 00000040 B800000000              mov rax, 0
   111 00000045 48BF-                   mov rdi, prompt_for_name
   111 00000047 [3E00000000000000] 
   112 0000004F E8(00000000)            call printf
   113                                  
   114                                  ;Input user names
   115 00000054 B800000000              mov rax, 0
   116 00000059 48BF-                   mov rdi, user_name
   116 0000005B [4003000000000000] 
   117 00000063 BE30000000              mov rsi, name_string_size
   118 00000068 488B1425[00000000]      mov rdx, [stdin]
   119 00000070 E8(00000000)            call fgets
   120                                  
   121                                  ;Remove newline
   122 00000075 B800000000              mov rax, 0
   123 0000007A 48BF-                   mov rdi, user_name
   123 0000007C [4003000000000000] 
   124 00000084 E8(00000000)            call strlen
   125 00000089 C680[3F030000]00        mov [user_name+rax-1], byte 0
   126                                  
   127                                  ;Say something nice to the user of this program.
   128 00000090 B800000000              mov rax,0
   129 00000095 48BF-                   mov rdi,friendly_message
   129 00000097 [8600000000000000] 
   130 0000009F 48BE-                   mov rsi, user_name
   130 000000A1 [4003000000000000] 
   131 000000A9 E8(00000000)            call printf
   132                                  
   133                                  ;Count the characters in the user's name
   134 000000AE 4831C0                  xor rax,rax
   135 000000B1 48BF-                   mov rdi, user_name
   135 000000B3 [4003000000000000] 
   136 000000BB E8(00000000)            call strlen
   137 000000C0 4989C7                  mov r15,rax
   138                                  ;r15 holds the number of characters
   139                                  
   140                                  ;Restore the values to non-GPRs
   141 000000C3 B807000000              mov rax,7
   142 000000C8 BA00000000              mov rdx,0
   143 000000CD 0FAE2C25[00000000]      xrstor [backup_storage_area]
   144                                  
   145                                  ;Send back the number of characters
   146 000000D5 4C89F8                  mov rax,r15
   147                                  
   148                                  ;Restore the GPRs
   149 000000D8 9D                      popf
   150 000000D9 415F                    pop r15
   151 000000DB 415E                    pop r14
   152 000000DD 415D                    pop r13
   153 000000DF 415C                    pop r12
   154 000000E1 415B                    pop r11
   155 000000E3 415A                    pop r10
   156 000000E5 4159                    pop r9
   157 000000E7 4158                    pop r8
   158 000000E9 5E                      pop rsi
   159 000000EA 5F                      pop rdi
   160 000000EB 5A                      pop rdx
   161 000000EC 59                      pop rcx
   162 000000ED 5B                      pop rbx
   163 000000EE 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   164 000000EF C3                      ret
   165                                  ;End of the function helloworld ====================================================================
   166                                  

     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Average". This program calculates the average speed from Fullerton to Santa Ana, Santa Ana to Long Beach,   *
     3                                  ;and then Long Bach to Fullerton.                                                                                   *
     4                                  ;                                                                                                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     7                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     8                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     9                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    13                                  ;Author information
    14                                  ;  Author name: Kanji Oyama
    15                                  ;  Author email: kanjioyama@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Average
    19                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    20                                  ;  Date program began: 2024-Jan-24
    21                                  ;  Date of last update: 2024-Feb-4
    22                                  ;  Files in this program: driver.c, average.asm, r.sh.
    23                                  ;  Testing: Alpha testing completed.  All functions are correct.
    24                                  ;  Status: Ready for release to customers
    25                                  ;
    26                                  ;Purpose
    27                                  ;  This program calculates the average speed from Fullerton to Santa Ana, Santa Ana to Long Beach,   
    28                                  ;  and then Long Bach to Fullerton.
    29                                  ;
    30                                  ;This file:
    31                                  ;  File name: average.asm
    32                                  ;  Language: X86-64
    33                                  ;  Max page width: 124 columns
    34                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    35                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    36                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    37                                  ;  Prototype of this function: double average();
    38                                  ; 
    39                                  ;
    40                                  ;
    41                                  ;
    42                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    43                                  
    44                                  extern printf
    45                                  
    46                                  extern stdin
    47                                  
    48                                  extern fgets
    49                                  
    50                                  extern strlen
    51                                  
    52                                  extern scanf
    53                                  
    54                                  global average
    55                                  
    56                                  name_string_size equ 48
    57                                  title_string_size equ 48
    58                                  
    59                                  segment .data
    60 00000000 506C6561736520656E-         prompt_for_name db "Please enter your first and last names: ", 0
    60 00000009 74657220796F757220-
    60 00000012 666972737420616E64-
    60 0000001B 206C617374206E616D-
    60 00000024 65733A2000         
    61 00000029 506C6561736520656E-         friendly_message db "Please enter your title such as Lieutenant, Chief, Mr, Ms, Influencer, Chairman, Freshman, Foreman, Project Leader, etc: ", 10, 0
    61 00000032 74657220796F757220-
    61 0000003B 7469746C6520737563-
    61 00000044 68206173204C696575-
    61 0000004D 74656E616E742C2043-
    61 00000056 686965662C204D722C-
    61 0000005F 204D732C20496E666C-
    61 00000068 75656E6365722C2043-
    61 00000071 686169726D616E2C20-
    61 0000007A 46726573686D616E2C-
    61 00000083 20466F72656D616E2C-
    61 0000008C 2050726F6A65637420-
    61 00000095 4C65616465722C2065-
    61 0000009E 74633A200A00       
    62 000000A4 5468616E6B20796F75-         thankyou_message db "Thank you %s %s", 10, 0
    62 000000AD 2025732025730A00   
    63 000000B5 456E74657220746865-         first_miles_input db "Enter the number of miles traveled from Fullerton to Santa Ana: ", 0
    63 000000BE 206E756D626572206F-
    63 000000C7 66206D696C65732074-
    63 000000D0 726176656C65642066-
    63 000000D9 726F6D2046756C6C65-
    63 000000E2 72746F6E20746F2053-
    63 000000EB 616E746120416E613A-
    63 000000F4 2000               
    64 000000F6 456E74657220746865-         second_miles_input db "Enter the number of miles traveled from Santa Ana to Long Beach: ", 0
    64 000000FF 206E756D626572206F-
    64 00000108 66206D696C65732074-
    64 00000111 726176656C65642066-
    64 0000011A 726F6D2053616E7461-
    64 00000123 20416E6120746F204C-
    64 0000012C 6F6E67204265616368-
    64 00000135 3A2000             
    65 00000138 456E74657220746865-         third_miles_input db"Enter the number of miles traveled from Long Beach to Fullerton: ", 0
    65 00000141 206E756D626572206F-
    65 0000014A 66206D696C65732074-
    65 00000153 726176656C65642066-
    65 0000015C 726F6D204C6F6E6720-
    65 00000165 426561636820746F20-
    65 0000016E 46756C6C6572746F6E-
    65 00000177 3A2000             
    66 0000017A 456E74657220796F75-         speed_input_prompt db "Enter your average speed during that leg of the trip: ", 0
    66 00000183 722061766572616765-
    66 0000018C 207370656564206475-
    66 00000195 72696E672074686174-
    66 0000019E 206C6567206F662074-
    66 000001A7 686520747269703A20-
    66 000001B0 00                 
    67 000001B1 54686520696E707574-         processing_text db "The inputted data are being processed.", 0
    67 000001BA 746564206461746120-
    67 000001C3 617265206265696E67-
    67 000001CC 2070726F6365737365-
    67 000001D5 642E00             
    68 000001D8 54686520746F74616C-         total_distance db "The total distance traveled is %lf miles.", 10, 0
    68 000001E1 2064697374616E6365-
    68 000001EA 2074726176656C6564-
    68 000001F3 20697320256C66206D-
    68 000001FC 696C65732E0A00     
    69 00000203 5468652074696D6520-         total_time db "The time of the trip is %lf hours", 10, 0
    69 0000020C 6F6620746865207472-
    69 00000215 697020697320256C66-
    69 0000021E 20686F7572730A00   
    70 00000226 546865206176657261-         average_speed db "The average speed during this trip is %lf mph.", 10, 0
    70 0000022F 676520737065656420-
    70 00000238 647572696E67207468-
    70 00000241 697320747269702069-
    70 0000024A 7320256C66206D7068-
    70 00000253 2E0A00             
    71                                  
    72 00000256 256C6600                    format_float db "%lf", 0
    73 0000025A 0000000000000840            const_float_three dq 3.0
    74                                  
    75                                  segment .bss
    76                                      align 64
    77 00000000 <res 340h>                  backup_storage_area resb 832
    78 00000340 <res 30h>                   user_name resb name_string_size
    79 00000370 <res 30h>                   title resb title_string_size
    80                                  
    81                                  segment .text
    82                                  average:
    83                                  ;Backup GPRs
    84 00000000 55                          push rbp
    85 00000001 4889E5                      mov rbp, rsp
    86 00000004 53                          push rbx
    87 00000005 51                          push rcx
    88 00000006 52                          push rdx
    89 00000007 57                          push rdi
    90 00000008 56                          push rsi
    91 00000009 4150                        push r8
    92 0000000B 4151                        push r9
    93 0000000D 4152                        push r10
    94 0000000F 4153                        push r11
    95 00000011 4154                        push r12
    96 00000013 4155                        push r13
    97 00000015 4156                        push r14
    98 00000017 4157                        push r15
    99 00000019 9C                          pushf
   100                                  
   101                                  ;Backup registers
   102 0000001A B807000000                  mov rax, 7
   103 0000001F BA00000000                  mov rdx, 0
   104 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   105                                      
   106                                  ;Output the prompts for user
   107 0000002C B800000000                  mov rax, 0
   108 00000031 48BF-                       mov rdi, prompt_for_name
   108 00000033 [0000000000000000] 
   109 0000003B E8(00000000)                call printf
   110                                  
   111                                  ;Input usernames
   112 00000040 B800000000                  mov rax, 0
   113 00000045 48BF-                       mov rdi, user_name
   113 00000047 [4003000000000000] 
   114 0000004F BE30000000                  mov rsi, name_string_size
   115 00000054 488B1425[00000000]          mov rdx, [stdin]
   116 0000005C E8(00000000)                call fgets
   117                                  
   118                                  ;Remove newline
   119 00000061 B800000000                  mov rax, 0
   120 00000066 48BF-                       mov rdi, user_name
   120 00000068 [4003000000000000] 
   121 00000070 E8(00000000)                call strlen
   122 00000075 C680[3F030000]00            mov [user_name + rax - 1], byte 0
   123                                  
   124                                  ;Output the title prompt for user
   125 0000007C B800000000                  mov rax, 0
   126 00000081 48BF-                       mov rdi, friendly_message
   126 00000083 [2900000000000000] 
   127 0000008B E8(00000000)                call printf
   128                                  
   129                                  ;Input title for user
   130 00000090 B800000000                  mov rax, 0
   131 00000095 48BF-                       mov rdi, title
   131 00000097 [7003000000000000] 
   132 0000009F BE30000000                  mov rsi, title_string_size
   133 000000A4 488B1425[00000000]          mov rdx, [stdin]
   134 000000AC E8(00000000)                call fgets
   135                                  
   136                                  ;Remove newline
   137 000000B1 B800000000                  mov rax, 0
   138 000000B6 48BF-                       mov rdi, title
   138 000000B8 [7003000000000000] 
   139 000000C0 E8(00000000)                call strlen
   140 000000C5 C680[6F030000]00            mov [title + rax - 1], byte 0
   141                                  
   142                                  ;Send thank you message
   143 000000CC B800000000                  mov rax, 0
   144 000000D1 48BF-                       mov rdi, thankyou_message
   144 000000D3 [A400000000000000] 
   145 000000DB 48BE-                       mov rsi, title
   145 000000DD [7003000000000000] 
   146 000000E5 48BA-                       mov rdx, user_name
   146 000000E7 [4003000000000000] 
   147 000000EF E8(00000000)                call printf
   148                                  
   149                                  ;Output first distance prompt
   150 000000F4 B800000000                  mov rax, 0
   151 000000F9 48BF-                       mov rdi, first_miles_input
   151 000000FB [B500000000000000] 
   152 00000103 E8(00000000)                call printf
   153                                  ;Get first distance
   154 00000108 B800000000                  mov rax, 0
   155 0000010D 6A00                        push qword 0
   156 0000010F 6A00                        push qword 0
   157 00000111 48BF-                       mov rdi, format_float
   157 00000113 [5602000000000000] 
   158 0000011B 4889E6                      mov rsi, rsp
   159 0000011E E8(00000000)                call scanf
   160 00000123 F2440F103C24                movsd xmm15, [rsp] ;xmm15 contains the distance from Fullerton to Santa Ana
   161 00000129 58                          pop rax
   162 0000012A 58                          pop rax
   163                                  ;Output first speed prompt
   164 0000012B B800000000                  mov rax, 0
   165 00000130 48BF-                       mov rdi, speed_input_prompt
   165 00000132 [7A01000000000000] 
   166 0000013A E8(00000000)                call printf
   167                                  ;Get first speed
   168 0000013F B800000000                  mov rax, 0
   169 00000144 6A00                        push qword 0
   170 00000146 6A00                        push qword 0
   171 00000148 48BF-                       mov rdi, format_float
   171 0000014A [5602000000000000] 
   172 00000152 4889E6                      mov rsi, rsp
   173 00000155 E8(00000000)                call scanf
   174 0000015A F2440F103424                movsd xmm14, [rsp] ;xmm14 contains the average speed from Fullerton to Santa Ana
   175 00000160 58                          pop rax
   176 00000161 58                          pop rax
   177                                  
   178                                  ;Output second distance prompt
   179 00000162 B800000000                  mov rax, 0
   180 00000167 48BF-                       mov rdi, second_miles_input
   180 00000169 [F600000000000000] 
   181 00000171 E8(00000000)                call printf
   182                                  ;Get second distance
   183 00000176 B800000000                  mov rax, 0
   184 0000017B 6A00                        push qword 0
   185 0000017D 6A00                        push qword 0
   186 0000017F 48BF-                       mov rdi, format_float
   186 00000181 [5602000000000000] 
   187 00000189 4889E6                      mov rsi, rsp
   188 0000018C E8(00000000)                call scanf
   189 00000191 F2440F102C24                movsd xmm13, [rsp] ;xmm13 contains the distance from Santa Ana to Long Beach
   190 00000197 58                          pop rax
   191 00000198 58                          pop rax
   192                                  ;Output second speed prompt
   193 00000199 B800000000                  mov rax, 0
   194 0000019E 48BF-                       mov rdi, speed_input_prompt
   194 000001A0 [7A01000000000000] 
   195 000001A8 E8(00000000)                call printf
   196                                  ;Get second speed
   197 000001AD B800000000                  mov rax, 0
   198 000001B2 6A00                        push qword 0
   199 000001B4 6A00                        push qword 0
   200 000001B6 48BF-                       mov rdi, format_float
   200 000001B8 [5602000000000000] 
   201 000001C0 4889E6                      mov rsi, rsp
   202 000001C3 E8(00000000)                call scanf
   203 000001C8 F2440F102424                movsd xmm12, [rsp] ;xmm12 contains the average speed from Santa Ana to Long Beach
   204 000001CE 58                          pop rax
   205 000001CF 58                          pop rax
   206                                  
   207                                  ;Output third distance prompt
   208 000001D0 B800000000                  mov rax, 0
   209 000001D5 48BF-                       mov rdi, third_miles_input
   209 000001D7 [3801000000000000] 
   210 000001DF E8(00000000)                call printf
   211                                  ;Get third distance
   212 000001E4 B800000000                  mov rax, 0
   213 000001E9 6A00                        push qword 0
   214 000001EB 6A00                        push qword 0
   215 000001ED 48BF-                       mov rdi, format_float
   215 000001EF [5602000000000000] 
   216 000001F7 4889E6                      mov rsi, rsp
   217 000001FA E8(00000000)                call scanf
   218 000001FF F2440F101C24                movsd xmm11, [rsp] ;xmm11 contains the distance from Long Beach to Fullerton
   219 00000205 58                          pop rax
   220 00000206 58                          pop rax
   221                                  ;Get third speed prompt
   222 00000207 B800000000                  mov rax, 0
   223 0000020C 48BF-                       mov rdi, speed_input_prompt
   223 0000020E [7A01000000000000] 
   224 00000216 E8(00000000)                call printf
   225                                  ;Get third speed
   226 0000021B B800000000                  mov rax, 0
   227 00000220 6A00                        push qword 0
   228 00000222 6A00                        push qword 0
   229 00000224 48BF-                       mov rdi, format_float
   229 00000226 [5602000000000000] 
   230 0000022E 4889E6                      mov rsi, rsp
   231 00000231 E8(00000000)                call scanf
   232 00000236 F2440F101424                movsd xmm10, [rsp] ;xmm10 contains the average speed from Long Beach to Fullerton
   233 0000023C 58                          pop rax
   234 0000023D 58                          pop rax
   235                                  
   236                                  ;Output the total distance
   237 0000023E F2410F10CB                  movsd xmm1, xmm11
   238 00000243 F2410F10D5                  movsd xmm2, xmm13
   239 00000248 F2410F58D7                  addsd xmm2, xmm15
   240 0000024D F20F58CA                    addsd xmm1, xmm2
   241 00000251 6A00                        push qword 0
   242 00000253 6A00                        push qword 0
   243 00000255 B801000000                  mov rax, 1
   244 0000025A 48BF-                       mov rdi, total_distance
   244 0000025C [D801000000000000] 
   245 00000264 48BE-                       mov rsi, format_float
   245 00000266 [5602000000000000] 
   246 0000026E F20F10C1                    movsd xmm0, xmm1
   247 00000272 E8(00000000)                call printf
   248 00000277 58                          pop rax
   249 00000278 58                          pop rax
   250                                  
   251                                  ;Output the time of the trip
   252 00000279 F2450F5EFE                  divsd xmm15, xmm14
   253 0000027E F2450F5EEC                  divsd xmm13, xmm12
   254 00000283 F2450F5EDA                  divsd xmm11, xmm10
   255 00000288 F2450F58EB                  addsd xmm13, xmm11
   256 0000028D F2450F58FD                  addsd xmm15, xmm13
   257 00000292 6A00                        push qword 0
   258 00000294 6A00                        push qword 0
   259 00000296 B801000000                  mov rax, 1
   260 0000029B 48BF-                       mov rdi, total_time
   260 0000029D [0302000000000000] 
   261 000002A5 48BE-                       mov rsi, format_float
   261 000002A7 [5602000000000000] 
   262 000002AF F2410F10C7                  movsd xmm0, xmm15
   263 000002B4 E8(00000000)                call printf
   264 000002B9 58                          pop rax
   265 000002BA 58                          pop rax
   266                                  
   267                                  ;Output average speed
   268 000002BB F2450F58E2                  addsd xmm12, xmm10
   269 000002C0 F2450F58F4                  addsd xmm14, xmm12
   270 000002C5 F2440F5E3425-               divsd xmm14, qword[const_float_three]
   270 000002CB [5A020000]         
   271 000002CF 6A00                        push qword 0
   272 000002D1 6A00                        push qword 0
   273 000002D3 B801000000                  mov rax, 1
   274 000002D8 48BF-                       mov rdi, average_speed
   274 000002DA [2602000000000000] 
   275 000002E2 48BE-                       mov rsi, format_float
   275 000002E4 [5602000000000000] 
   276 000002EC F2410F10C6                  movsd xmm0, xmm14
   277 000002F1 E8(00000000)                call printf
   278 000002F6 58                          pop rax
   279 000002F7 58                          pop rax
   280                                  
   281 000002F8 6A00                        push qword 0
   282 000002FA F2440F113424                movsd [rsp], xmm14
   283                                  
   284                                  ;Restore registers
   285 00000300 B807000000                  mov rax, 7
   286 00000305 BA00000000                  mov rdx, 0
   287 0000030A 0FAE2C25[00000000]          xrstor [backup_storage_area]
   288                                  
   289 00000312 F20F100424                  movsd xmm0, [rsp]
   290 00000317 58                          pop rax
   291                                  
   292                                  ;Restore the GPRs
   293 00000318 9D                          popf
   294 00000319 415F                        pop r15
   295 0000031B 415E                        pop r14
   296 0000031D 415D                        pop r13
   297 0000031F 415C                        pop r12
   298 00000321 415B                        pop r11
   299 00000323 415A                        pop r10
   300 00000325 4159                        pop r9
   301 00000327 4158                        pop r8
   302 00000329 5E                          pop rsi
   303 0000032A 5F                          pop rdi
   304 0000032B 5A                          pop rdx
   305 0000032C 59                          pop rcx
   306 0000032D 5B                          pop rbx
   307 0000032E 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   308 0000032F C3                          ret

     1                                  ;****************************************************************************************************************************
     2                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     3                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     4                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     5                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     6                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
     7                                  ;****************************************************************************************************************************
     8                                  
     9                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    10                                  ;Author information
    11                                  ;  Author name: Kanji Oyama
    12                                  ;  Author email: kanjioyama@csu.fullerton.edu
    13                                  ;
    14                                  ;Program information
    15                                  ;  Program name: normalize_array
    16                                  ;  Programming languages: x86 Assembly, C, C++
    17                                  ;  Date program began: 2024-Apr-14
    18                                  ;  Date of last update: 2024-Apr-14
    19                                  ;  Files in this program: r.sh, executive.asm, fill_random_array.asm, isnan.asm, main.c, normalize_array.asm, 
    20                                  ;                       show_array.asm, sort.cpp
    21                                  ;  Testing: Alpha testing completed.  All functions are correct.
    22                                  ;  Status: Ready for release to customers
    23                                  ;
    24                                  ;Purpose
    25                                  ;  This program normalizes an array given by the executive file
    26                                  ;
    27                                  ;This file:
    28                                  ;  File name: normalize_array.asm
    29                                  ;  Language: X86-64
    30                                  ;  Max page width: 124 columns
    31                                  ;  Assemble (standard):
    32                                  ;       nasm -f elf64 -l executive.lis -o executive.o executive.asm
    33                                  ;       nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    34                                  ;       nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    35                                  ;       nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    36                                  ;       nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm 
    37                                  ;       
    38                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    39                                  ;  Prototype of this function: void normalize_array(double* array, int array_size);
    40                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    41                                  
    42                                  global normalize_array
    43                                  
    44                                  segment .data
    45 00000000 3078253031366C7820-         output_format dq "0x%016lx %18.13g", 10, 0
    45 00000009 2531382E3133670A00-
    45 00000012 000000000000000000-
    45 0000001B 0000000000         
    46 00000020 0A00                        newline db "", 10, 0
    47                                  
    48                                  segment .bss
    49                                      align 64
    50 00000000 <res 340h>                  backup_storage_area resb 832
    51                                  
    52                                  segment .text
    53                                  
    54                                  normalize_array:
    55                                  ; Backup GPR's
    56 00000000 55                          push rbp
    57 00000001 4889E5                      mov rbp, rsp
    58 00000004 53                          push rbx
    59 00000005 51                          push rcx
    60 00000006 52                          push rdx
    61 00000007 57                          push rdi
    62 00000008 56                          push rsi
    63 00000009 4150                        push r8
    64 0000000B 4151                        push r9
    65 0000000D 4152                        push r10
    66 0000000F 4153                        push r11
    67 00000011 4154                        push r12
    68 00000013 4155                        push r13
    69 00000015 4156                        push r14
    70 00000017 4157                        push r15
    71 00000019 9C                          pushf
    72                                  
    73                                  ; Backup registers
    74 0000001A B807000000                  mov rax, 7
    75 0000001F BA00000000                  mov rdx, 0
    76 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    77                                  
    78 0000002C 4989FF                  mov r15, rdi    ;holds our array
    79 0000002F 4989F6                  mov r14, rsi    ;holds the number of values
    80 00000032 41BD00000000            mov r13, 0      ;our counter
    81                                  
    82                                  check_capacity:
    83 00000038 4D39F5                      cmp r13, r14
    84 0000003B 7C02                        jl normalize
    85 0000003D EB3A                        jmp exit
    86                                  
    87                                  normalize:
    88 0000003F F2470F103CEF                movsd xmm15, [r15 + r13 * 8]
    89 00000045 6A00                        push qword 0
    90 00000047 F2440F113C24                movsd [rsp], xmm15
    91 0000004D 415C                        pop r12
    92 0000004F 49C1E40C                    shl r12, 12
    93 00000053 49C1EC0C                    shr r12, 12
    94 00000057 48B8000000000000F0-         mov rax, 0x3ff0000000000000
    94 00000060 3F                 
    95 00000061 4909C4                      or r12, rax
    96                                      
    97 00000064 4154                        push r12
    98 00000066 F2440F103C24                movsd xmm15, [rsp]
    99 0000006C 415C                        pop r12
   100                                  
   101 0000006E F2470F113CEF                movsd [r15 + r13 * 8], xmm15
   102 00000074 49FFC5                      inc r13
   103 00000077 EBBF                        jmp check_capacity
   104                                  
   105                                  exit:
   106                                  
   107                                  ; Restore xmm registers
   108 00000079 B807000000                  mov rax, 7
   109 0000007E BA00000000                  mov rdx, 0
   110 00000083 0FAE2C25[00000000]          xrstor [backup_storage_area]
   111                                      
   112                                  ; Restore the GPR's
   113 0000008B 9D                          popf
   114 0000008C 415F                        pop r15
   115 0000008E 415E                        pop r14
   116 00000090 415D                        pop r13
   117 00000092 415C                        pop r12
   118 00000094 415B                        pop r11
   119 00000096 415A                        pop r10
   120 00000098 4159                        pop r9
   121 0000009A 4158                        pop r8
   122 0000009C 5E                          pop rsi
   123 0000009D 5F                          pop rdi
   124 0000009E 5A                          pop rdx
   125 0000009F 59                          pop rcx
   126 000000A0 5B                          pop rbx
   127 000000A1 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   128 000000A2 C3                          ret
   129                                  
   130                                      ; /mnt/c/users/kanji/documents/assignment 4

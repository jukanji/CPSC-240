     1                                  ;****************************************************************************************************************************
     2                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     3                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     4                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     5                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     6                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
     7                                  ;****************************************************************************************************************************
     8                                  
     9                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    10                                  ;Author information
    11                                  ;  Author name: Kanji Oyama
    12                                  ;  Author email: kanjioyama@csu.fullerton.edu
    13                                  ;
    14                                  ;Program information
    15                                  ;  Program name: Manager
    16                                  ;  Programming languages: x86 Assembly, C, C++
    17                                  ;  Date program began: 2024-Apr-14
    18                                  ;  Date of last update: 2024-Apr-14
    19                                  ;  Files in this program: r.sh, executive.asm, fill_random_array.asm, isnan.asm, main.c, normalize_array.asm, 
    20                                  ;                       show_array.asm, sort.cpp
    21                                  ;  Testing: Alpha testing completed.  All functions are correct.
    22                                  ;  Status: Ready for release to customers
    23                                  ;
    24                                  ;Purpose
    25                                  ;  This program asks the user for the number of values they want in an array, randomizes that number of numbers, then
    26                                  ;  inserts it into an array, normalizes each number, and then sorts them.
    27                                  ;
    28                                  ;This file:
    29                                  ;  File name: executive.asm
    30                                  ;  Language: X86-64
    31                                  ;  Max page width: 124 columns
    32                                  ;  Assemble (standard):
    33                                  ;       nasm -f elf64 -l executive.lis -o executive.o executive.asm
    34                                  ;       nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    35                                  ;       nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    36                                  ;       nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    37                                  ;       nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm 
    38                                  ;       
    39                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    40                                  ;  Prototype of this function: string executive();
    41                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    42                                  
    43                                  extern printf
    44                                  extern stdin
    45                                  extern fgets
    46                                  extern strlen
    47                                  extern scanf
    48                                  
    49                                  extern fill_random_array
    50                                  extern show_array
    51                                  extern normalize_array
    52                                  extern sort
    53                                  
    54                                  global executive
    55                                  
    56                                  array_size equ 100
    57                                  name_string_size equ 48
    58                                  title_string_size equ 48
    59                                  
    60                                  segment .data
    61 00000000 506C6561736520656E-         intro_name db "Please enter your name: ", 10, 0
    61 00000009 74657220796F757220-
    61 00000012 6E616D653A200A00   
    62 0000001A 506C6561736520656E-         intro_title db "Please enter your title (Mr, Ms, Sargent, Chief, Project, Leader, ect): ", 10, 0
    62 00000023 74657220796F757220-
    62 0000002C 7469746C6520284D72-
    62 00000035 2C204D732C20536172-
    62 0000003E 67656E742C20436869-
    62 00000047 65662C2050726F6A65-
    62 00000050 63742C204C65616465-
    62 00000059 722C20656374293A20-
    62 00000062 0A00               
    63 00000064 4E69636520746F206D-         intro_full_name db "Nice to meet you %s %s", 10, 0
    63 0000006D 65657420796F752025-
    63 00000076 732025730A00       
    64                                      
    65 0000007C 546869732070726F67-         instructions_one db "This program will generate 64-bit IEEE float numbers.", 10, 0
    65 00000085 72616D2077696C6C20-
    65 0000008E 67656E657261746520-
    65 00000097 36342D626974204945-
    65 000000A0 454520666C6F617420-
    65 000000A9 6E756D626572732E0A-
    65 000000B2 00                 
    66 000000B3 486F77206D616E7920-         instructions_two db "How many numbers do you want. Today's limit is 100 per customer.", 10 ,0
    66 000000BC 6E756D626572732064-
    66 000000C5 6F20796F752077616E-
    66 000000CE 742E20546F64617927-
    66 000000D7 73206C696D69742069-
    66 000000E0 732031303020706572-
    66 000000E9 20637573746F6D6572-
    66 000000F2 2E0A00             
    67 000000F5 596F7572206E756D62-         instructions_three db "Your numbers have been stored in an array. Here is that array. ", 10, 0
    67 000000FE 657273206861766520-
    67 00000107 6265656E2073746F72-
    67 00000110 656420696E20616E20-
    67 00000119 61727261792E204865-
    67 00000122 726520697320746861-
    67 0000012B 742061727261792E20-
    67 00000134 0A00               
    68 00000136 546865206172726179-         instructions_four db "The array will now be normalized to the range 1.0 to 2.0. Here is the normalized array", 10 ,0
    68 0000013F 2077696C6C206E6F77-
    68 00000148 206265206E6F726D61-
    68 00000151 6C697A656420746F20-
    68 0000015A 7468652072616E6765-
    68 00000163 20312E3020746F2032-
    68 0000016C 2E302E204865726520-
    68 00000175 697320746865206E6F-
    68 0000017E 726D616C697A656420-
    68 00000187 61727261790A00     
    69 0000018E 546865206172726179-         instructions_five db "The array will now be sorted", 10, 0
    69 00000197 2077696C6C206E6F77-
    69 000001A0 20626520736F727465-
    69 000001A9 640A00             
    70                                  
    71 000001AC 476F6F642062796520-         goodbye_message db "Good bye %s. You are welcome any time.", 10, 0
    71 000001B5 25732E20596F752061-
    71 000001BE 72652077656C636F6D-
    71 000001C7 6520616E792074696D-
    71 000001D0 652E0A00           
    72                                  
    73 000001D4 0A00                        newline db "", 10, 0
    74                                  
    75 000001D6 256C66000000000000-         float_format dq "%lf", 0
    75 000001DF 00000000000000     
    76 000001E6 256400                      int_format db "%d", 0
    77 000001E9 257300000000000000-         string_format dq "%s", 0
    77 000001F2 00000000000000     
    78                                  
    79                                  
    80                                  segment .bss
    81                                      align 64
    82 00000000 <res 340h>                  backup_storage_area resb 832
    83 00000340 <res 30h>                   user_name resb name_string_size
    84 00000370 <res 30h>                   title resb title_string_size
    85 000003A0 <res 320h>                  an_array resq array_size
    86                                      
    87                                  
    88                                  segment .text
    89                                  
    90                                  executive:
    91                                  ; Backup GPR's
    92 00000000 55                          push rbp
    93 00000001 4889E5                      mov rbp, rsp
    94 00000004 53                          push rbx
    95 00000005 51                          push rcx
    96 00000006 52                          push rdx
    97 00000007 57                          push rdi
    98 00000008 56                          push rsi
    99 00000009 4150                        push r8
   100 0000000B 4151                        push r9
   101 0000000D 4152                        push r10
   102 0000000F 4153                        push r11
   103 00000011 4154                        push r12
   104 00000013 4155                        push r13
   105 00000015 4156                        push r14
   106 00000017 4157                        push r15
   107 00000019 9C                          pushf
   108                                  
   109                                  ; Backup registers
   110 0000001A B807000000                  mov rax, 7
   111 0000001F BA00000000                  mov rdx, 0
   112 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   113                                  
   114                                  ; Output our intro message
   115 0000002C B800000000                  mov rax, 0
   116 00000031 48BF-                       mov rdi, intro_name
   116 00000033 [0000000000000000] 
   117 0000003B E8(00000000)                call printf
   118                                  
   119                                  ; Retrieve user's name
   120 00000040 48BF-                       mov rdi, user_name
   120 00000042 [4003000000000000] 
   121 0000004A BE30000000                  mov rsi, name_string_size
   122 0000004F 488B1425[00000000]          mov rdx, [stdin]
   123 00000057 E8(00000000)                call fgets
   124                                  
   125                                  ; remove newline
   126 0000005C B800000000                  mov rax, 0
   127 00000061 48BF-                       mov rdi, user_name
   127 00000063 [4003000000000000] 
   128 0000006B E8(00000000)                call strlen
   129 00000070 C680[3F030000]00            mov [user_name + rax - 1], byte 0
   130                                  
   131                                  ; Output the title message
   132 00000077 48BF-                       mov rdi, intro_title
   132 00000079 [1A00000000000000] 
   133 00000081 E8(00000000)                call printf
   134                                  
   135                                  ; Receive the user's title
   136 00000086 48BF-                       mov rdi, title
   136 00000088 [7003000000000000] 
   137 00000090 BE30000000                  mov rsi, title_string_size
   138 00000095 488B1425[00000000]          mov rdx, [stdin]
   139 0000009D E8(00000000)                call fgets
   140                                  
   141                                  ; remove newline
   142 000000A2 B800000000                  mov rax, 0
   143 000000A7 48BF-                       mov rdi, title
   143 000000A9 [7003000000000000] 
   144 000000B1 E8(00000000)                call strlen
   145 000000B6 C680[6F030000]00            mov [title + rax - 1], byte 0
   146                                  
   147                                  ; Output their full name and title
   148 000000BD 48BF-                       mov rdi, intro_full_name
   148 000000BF [6400000000000000] 
   149 000000C7 48BE-                       mov rsi, title
   149 000000C9 [7003000000000000] 
   150 000000D1 48BA-                       mov rdx, user_name
   150 000000D3 [4003000000000000] 
   151 000000DB E8(00000000)                call printf
   152                                  
   153                                  ; Ouput instrucitons line 1
   154 000000E0 48BF-                       mov rdi, instructions_one
   154 000000E2 [7C00000000000000] 
   155 000000EA E8(00000000)                call printf
   156                                  
   157                                  ; Output instructions line 2
   158 000000EF 48BF-                       mov rdi, instructions_two
   158 000000F1 [B300000000000000] 
   159 000000F9 E8(00000000)                call printf
   160                                  
   161                                  ; Retrieve the number of elements we want in our array from the user
   162 000000FE 48BF-                       mov rdi, int_format
   162 00000100 [E601000000000000] 
   163 00000108 4889E6                      mov rsi, rsp
   164 0000010B E8(00000000)                call scanf
   165 00000110 4C8B3C24                    mov r15, [rsp]  ;r15 now holds the number of items we want in our array
   166                                  
   167                                  ; Call our input array to add our random values
   168 00000114 48BF-                       mov rdi, an_array
   168 00000116 [A003000000000000] 
   169 0000011E 4C89FE                      mov rsi, r15   ;number of items in our array
   170 00000121 E8(00000000)                call fill_random_array
   171                                  
   172                                  ; Output our first prompt
   173 00000126 B800000000                  mov rax, 0
   174 0000012B 48BF-                       mov rdi, instructions_three
   174 0000012D [F500000000000000] 
   175 00000135 E8(00000000)                call printf
   176                                  
   177                                  ; Add an empty line for "fanciness"
   178 0000013A 48BF-                       mov rdi, newline
   178 0000013C [D401000000000000] 
   179 00000144 E8(00000000)                call printf
   180                                  
   181                                  ; Call our output array function
   182 00000149 48BF-                       mov rdi, an_array
   182 0000014B [A003000000000000] 
   183 00000153 4C89FE                      mov rsi, r15
   184 00000156 E8(00000000)                call show_array
   185                                  
   186                                  ; Call our normalize array function
   187 0000015B 48BF-                       mov rdi, an_array
   187 0000015D [A003000000000000] 
   188 00000165 4C89FE                      mov rsi, r15
   189 00000168 E8(00000000)                call normalize_array
   190                                  
   191                                  ; Output our second prompt
   192 0000016D 48BF-                       mov rdi, instructions_four
   192 0000016F [3601000000000000] 
   193 00000177 E8(00000000)                call printf
   194                                  
   195                                  ; Add an empty line for "fanciness"
   196 0000017C 48BF-                       mov rdi, newline
   196 0000017E [D401000000000000] 
   197 00000186 E8(00000000)                call printf
   198                                  
   199                                  ; Show our normalized array
   200 0000018B 48BF-                       mov rdi, an_array
   200 0000018D [A003000000000000] 
   201 00000195 4C89FE                      mov rsi, r15
   202 00000198 E8(00000000)                call show_array
   203                                  
   204                                  ; Output our second prompt
   205 0000019D 48BF-                       mov rdi, instructions_five
   205 0000019F [8E01000000000000] 
   206 000001A7 E8(00000000)                call printf
   207                                  
   208                                  ; Add an empty line for "fanciness"
   209 000001AC 48BF-                       mov rdi, newline
   209 000001AE [D401000000000000] 
   210 000001B6 E8(00000000)                call printf
   211                                  
   212                                  ; Call our sort array function to sort our array in c++
   213 000001BB 48BF-                       mov rdi, an_array
   213 000001BD [A003000000000000] 
   214 000001C5 4C89FE                      mov rsi, r15
   215 000001C8 E8(00000000)                call sort
   216                                  
   217                                  ; Display our now sorted array
   218 000001CD 48BF-                       mov rdi, an_array
   218 000001CF [A003000000000000] 
   219 000001D7 4C89FE                      mov rsi, r15
   220 000001DA E8(00000000)                call show_array
   221                                  
   222                                  ; Output our goodbye message to the user
   223 000001DF 48BF-                       mov rdi, goodbye_message
   223 000001E1 [AC01000000000000] 
   224 000001E9 48BE-                       mov rsi, title
   224 000001EB [7003000000000000] 
   225 000001F3 E8(00000000)                call printf
   226                                  
   227                                  ; Restore xmm registers
   228 000001F8 B807000000                  mov rax, 7
   229 000001FD BA00000000                  mov rdx, 0
   230 00000202 0FAE2C25[00000000]          xrstor [backup_storage_area]
   231                                  
   232                                  ; move our name to rax so we can return it to our main
   233 0000020A 48B8-                       mov rax, user_name
   233 0000020C [4003000000000000] 
   234                                  
   235                                  ; Restore the GPR's
   236 00000214 9D                          popf
   237 00000215 415F                        pop r15
   238 00000217 415E                        pop r14
   239 00000219 415D                        pop r13
   240 0000021B 415C                        pop r12
   241 0000021D 415B                        pop r11
   242 0000021F 415A                        pop r10
   243 00000221 4159                        pop r9
   244 00000223 4158                        pop r8
   245 00000225 5E                          pop rsi
   246 00000226 5F                          pop rdi
   247 00000227 5A                          pop rdx
   248 00000228 59                          pop rcx
   249 00000229 5B                          pop rbx
   250 0000022A 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   251 0000022B C3                          ret
   252                                  
   253                                      ; cd /mnt/c/users/kanji/documents/'assignment 4'

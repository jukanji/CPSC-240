     1                                  ;****************************************************************************************************************************
     2                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     3                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     4                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     5                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     6                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
     7                                  ;****************************************************************************************************************************
     8                                  
     9                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    10                                  ;Author information
    11                                  ;  Author name: Kanji Oyama
    12                                  ;  Author email: kanjioyama@csu.fullerton.edu
    13                                  ;
    14                                  ;Program information
    15                                  ;  Program name: fill_random_array
    16                                  ;  Programming languages: x86 Assembly, C, C++
    17                                  ;  Date program began: 2024-Apr-14
    18                                  ;  Date of last update: 2024-Apr-14
    19                                  ;  Files in this program: r.sh, executive.asm, fill_random_array.asm, isnan.asm, main.c, normalize_array.asm, 
    20                                  ;                       show_array.asm, sort.cpp
    21                                  ;  Testing: Alpha testing completed.  All functions are correct.
    22                                  ;  Status: Ready for release to customers
    23                                  ;
    24                                  ;Purpose
    25                                  ;  This program outputs all the elements in an array given by the user.
    26                                  ;
    27                                  ;This file:
    28                                  ;  File name: show_array.asm
    29                                  ;  Language: X86-64
    30                                  ;  Max page width: 124 columns
    31                                  ;  Assemble (standard):
    32                                  ;       nasm -f elf64 -l executive.lis -o executive.o executive.asm
    33                                  ;       nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    34                                  ;       nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    35                                  ;       nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    36                                  ;       nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm 
    37                                  ;       
    38                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    39                                  ;  Prototype of this function: void show_array(double* array, int array_size);
    40                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    41                                  
    42                                  global show_array
    43                                  
    44                                  extern printf
    45                                  
    46                                  segment .data
    47 00000000 494545453534090909-         title db "IEEE54			Scientific Decimal", 10, 0
    47 00000009 536369656E74696669-
    47 00000012 6320446563696D616C-
    47 0000001B 0A00               
    48 0000001D 3078253031366C7820-         output_format dq "0x%016lx %18.13g", 10, 0
    48 00000026 2531382E3133670A00-
    48 0000002F 000000000000000000-
    48 00000038 0000000000         
    49 0000003D 0A00                        newline db "", 10, 0
    50                                  
    51                                  segment .bss
    52                                      align 64
    53 00000000 <res 340h>                  backup_storage_area resb 832
    54                                  
    55                                  segment .text
    56                                  
    57                                  show_array:
    58                                  ; Backup GPR's
    59 00000000 55                          push rbp
    60 00000001 4889E5                      mov rbp, rsp
    61 00000004 53                          push rbx
    62 00000005 51                          push rcx
    63 00000006 52                          push rdx
    64 00000007 57                          push rdi
    65 00000008 56                          push rsi
    66 00000009 4150                        push r8
    67 0000000B 4151                        push r9
    68 0000000D 4152                        push r10
    69 0000000F 4153                        push r11
    70 00000011 4154                        push r12
    71 00000013 4155                        push r13
    72 00000015 4156                        push r14
    73 00000017 4157                        push r15
    74 00000019 9C                          pushf
    75                                  
    76                                  ; Backup registers
    77 0000001A B807000000                  mov rax, 7
    78 0000001F BA00000000                  mov rdx, 0
    79 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    80                                  
    81 0000002C 4989FF                  mov r15, rdi    ;holds our array
    82 0000002F 4989F6                  mov r14, rsi    ;holds the number of values
    83 00000032 41BD00000000            mov r13, 0      ;our counter
    84                                  
    85                                  ; Print our title to show the columns in our output
    86 00000038 48BF-                       mov rdi, title
    86 0000003A [0000000000000000] 
    87 00000042 E8(00000000)                call printf
    88                                  
    89                                  check_capacity:
    90 00000047 4D39F5                      cmp r13, r14
    91 0000004A 7C02                        jl output_element
    92 0000004C EB23                        jmp exit
    93                                  
    94                                  output_element:
    95 0000004E B801000000                  mov rax, 1
    96 00000053 48BF-                       mov rdi, output_format
    96 00000055 [1D00000000000000] 
    97 0000005D 4B8B34EF                    mov rsi, [r15 + r13 * 8]
    98 00000061 F2430F1004EF                movsd xmm0, [r15 + r13 * 8]
    99 00000067 E8(00000000)                call printf
   100                                  
   101 0000006C 49FFC5                      inc r13
   102 0000006F EBD6                        jmp check_capacity
   103                                  
   104                                  exit:
   105 00000071 48BF-                       mov rdi, newline
   105 00000073 [3D00000000000000] 
   106 0000007B E8(00000000)                call printf
   107                                  
   108                                  ; Restore xmm registers
   109 00000080 B807000000                  mov rax, 7
   110 00000085 BA00000000                  mov rdx, 0
   111 0000008A 0FAE2C25[00000000]          xrstor [backup_storage_area]
   112                                      
   113                                  ; Restore the GPR's
   114 00000092 9D                          popf
   115 00000093 415F                        pop r15
   116 00000095 415E                        pop r14
   117 00000097 415D                        pop r13
   118 00000099 415C                        pop r12
   119 0000009B 415B                        pop r11
   120 0000009D 415A                        pop r10
   121 0000009F 4159                        pop r9
   122 000000A1 4158                        pop r8
   123 000000A3 5E                          pop rsi
   124 000000A4 5F                          pop rdi
   125 000000A5 5A                          pop rdx
   126 000000A6 59                          pop rcx
   127 000000A7 5B                          pop rbx
   128 000000A8 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   129 000000A9 C3                          ret
   130                                  
   131                                      ; /mnt/c/users/kanji/documents/assignment 4

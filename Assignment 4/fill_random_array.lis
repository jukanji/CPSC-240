     1                                  ;****************************************************************************************************************************
     2                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     3                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     4                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     5                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     6                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
     7                                  ;****************************************************************************************************************************
     8                                  
     9                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    10                                  ;Author information
    11                                  ;  Author name: Kanji Oyama
    12                                  ;  Author email: kanjioyama@csu.fullerton.edu
    13                                  ;
    14                                  ;Program information
    15                                  ;  Program name: fill_random_array
    16                                  ;  Programming languages: x86 Assembly, C, C++
    17                                  ;  Date program began: 2024-Apr-14
    18                                  ;  Date of last update: 2024-Apr-14
    19                                  ;  Files in this program: r.sh, executive.asm, fill_random_array.asm, isnan.asm, main.c, normalize_array.asm, 
    20                                  ;                       show_array.asm, sort.cpp
    21                                  ;  Testing: Alpha testing completed.  All functions are correct.
    22                                  ;  Status: Ready for release to customers
    23                                  ;
    24                                  ;Purpose
    25                                  ;  This program fills an array with random values.
    26                                  ;
    27                                  ;This file:
    28                                  ;  File name: fill_random_array.asm
    29                                  ;  Language: X86-64
    30                                  ;  Max page width: 124 columns
    31                                  ;  Assemble (standard):
    32                                  ;       nasm -f elf64 -l executive.lis -o executive.o executive.asm
    33                                  ;       nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    34                                  ;       nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    35                                  ;       nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    36                                  ;       nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm 
    37                                  ;       
    38                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    39                                  ;  Prototype of this function: void fill_random_array(double* array, int array_size);
    40                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    41                                  
    42                                  global fill_random_array
    43                                  
    44                                  extern isnan
    45                                  extern printf
    46                                  
    47                                  segment .data
    48 00000000 256C66000000000000-         float_format dq "%lf", 0
    48 00000009 00000000000000     
    49 00000010 25642000                    int_format db "%d ", 0
    50 00000014 3078253031366C7820-         hex_format dq "0x%016lx ", 0
    50 0000001D 000000000000000000-
    50 00000026 000000000000       
    51                                  
    52                                  segment .bss
    53                                      align 64
    54 00000000 <res 340h>                  backup_storage_area resb 832
    55                                      
    56                                  
    57                                  segment .text
    58                                  
    59                                  fill_random_array:
    60                                  ; Backup GPR's
    61 00000000 55                          push rbp
    62 00000001 4889E5                      mov rbp, rsp
    63 00000004 53                          push rbx
    64 00000005 51                          push rcx
    65 00000006 52                          push rdx
    66 00000007 57                          push rdi
    67 00000008 56                          push rsi
    68 00000009 4150                        push r8
    69 0000000B 4151                        push r9
    70 0000000D 4152                        push r10
    71 0000000F 4153                        push r11
    72 00000011 4154                        push r12
    73 00000013 4155                        push r13
    74 00000015 4156                        push r14
    75 00000017 4157                        push r15
    76 00000019 9C                          pushf
    77                                  
    78                                  ; Backup registers
    79 0000001A B807000000                  mov rax, 7
    80 0000001F BA00000000                  mov rdx, 0
    81 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    82                                  
    83 0000002C 4989FF                  mov r15, rdi    ;holds our array
    84 0000002F 4989F6                  mov r14, rsi    ;holds the number of values
    85 00000032 41BD00000000            mov r13, 0      ;our counter
    86                                  
    87                                  check_capacity:
    88 00000038 4D39F5                      cmp r13, r14
    89 0000003B 7C02                        jl fill_array
    90 0000003D EB31                        jmp exit
    91                                  
    92                                  fill_array:
    93 0000003F B800000000                  mov rax, 0
    94 00000044 490FC7F4                    rdrand r12
    95 00000048 4C89E7                      mov rdi, r12
    96 0000004B 4154                        push r12
    97 0000004D 4154                        push r12
    98 0000004F F2440F103C24                movsd xmm15, [rsp]
    99 00000055 415C                        pop r12
   100 00000057 415C                        pop r12
   101                                  
   102 00000059 F2410F10C7                  movsd xmm0, xmm15
   103 0000005E E8(00000000)                call isnan
   104 00000063 74DA                        je fill_array
   105                                  
   106 00000065 F2470F113CEF                movsd [r15 + r13 * 8], xmm15
   107 0000006B 49FFC5                      inc r13
   108 0000006E EBC8                        jmp check_capacity
   109                                  
   110                                  exit:
   111                                  
   112                                  ; Restore xmm registers
   113 00000070 B807000000                  mov rax, 7
   114 00000075 BA00000000                  mov rdx, 0
   115 0000007A 0FAE2C25[00000000]          xrstor [backup_storage_area]
   116                                      
   117                                  ; Restore the GPR's
   118 00000082 9D                          popf
   119 00000083 415F                        pop r15
   120 00000085 415E                        pop r14
   121 00000087 415D                        pop r13
   122 00000089 415C                        pop r12
   123 0000008B 415B                        pop r11
   124 0000008D 415A                        pop r10
   125 0000008F 4159                        pop r9
   126 00000091 4158                        pop r8
   127 00000093 5E                          pop rsi
   128 00000094 5F                          pop rdi
   129 00000095 5A                          pop rdx
   130 00000096 59                          pop rcx
   131 00000097 5B                          pop rbx
   132 00000098 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   133 00000099 C3                          ret
   134                                  
   135                                      ; /mnt/c/users/kanji/documents/assignment 4

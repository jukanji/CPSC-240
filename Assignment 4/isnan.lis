     1                                  ;****************************************************************************************************************************
     2                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     3                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     4                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     5                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     6                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
     7                                  ;****************************************************************************************************************************
     8                                  
     9                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    10                                  ;Author information
    11                                  ;  Author name: Kanji Oyama
    12                                  ;  Author email: kanjioyama@csu.fullerton.edu
    13                                  ;
    14                                  ;Program information
    15                                  ;  Program name: isnan
    16                                  ;  Programming languages: x86 Assembly, C, C++
    17                                  ;  Date program began: 2024-Apr-14
    18                                  ;  Date of last update: 2024-Apr-14
    19                                  ;  Files in this program: r.sh, executive.asm, fill_random_array.asm, isnan.asm, main.c, normalize_array.asm, 
    20                                  ;                       show_array.asm, sort.cpp
    21                                  ;  Testing: Alpha testing completed.  All functions are correct.
    22                                  ;  Status: Ready for release to customers
    23                                  ;
    24                                  ;Purpose
    25                                  ;  This program tells the user whether or not a certain element is a number or not.
    26                                  ;
    27                                  ;This file:
    28                                  ;  File name: isnan.asm
    29                                  ;  Language: X86-64
    30                                  ;  Max page width: 124 columns
    31                                  ;  Assemble (standard):
    32                                  ;       nasm -f elf64 -l executive.lis -o executive.o executive.asm
    33                                  ;       nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    34                                  ;       nasm -f elf64 -l isnan.lis -o isnan.o isnan.asm
    35                                  ;       nasm -f elf64 -l show_array.lis -o show_array.o show_array.asm
    36                                  ;       nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm 
    37                                  ;       
    38                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    39                                  ;  Prototype of this function: bool isnan(double value);
    40                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    41                                  
    42                                  
    43                                  global isnan
    44                                  
    45                                  segment .data        ;Place initialized data here
    46                                  
    47                                  segment .bss         ;Declare pointers to un-initialized space in this segment.
    48                                  
    49                                  segment .text
    50                                  isnan:               ;Entry point.  Execution begins here.
    51                                  
    52                                  ;=========== Back up all the GPRs whether used in this program or not =========================================================
    53                                  
    54 00000000 55                        push       rbp                                              ;Save a copy of the stack base pointer
    55 00000001 4889E5                    mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
    56 00000004 53                        push       rbx                                              ;Back up rbx
    57 00000005 51                        push       rcx                                              ;Back up rcx
    58 00000006 52                        push       rdx                                              ;Back up rdx
    59 00000007 56                        push       rsi                                              ;Back up rsi
    60 00000008 57                        push       rdi                                              ;Back up rdi
    61 00000009 4150                      push       r8                                               ;Back up r8
    62 0000000B 4151                      push       r9                                               ;Back up r9
    63 0000000D 4152                      push       r10                                              ;Back up r10
    64 0000000F 4153                      push       r11                                              ;Back up r11
    65 00000011 4154                      push       r12                                              ;Back up r12
    66 00000013 4155                      push       r13                                              ;Back up r13
    67 00000015 4156                      push       r14                                              ;Back up r14
    68 00000017 4157                      push       r15                                              ;Back up r15
    69 00000019 9C                        pushf                                                       ;Back up rflags
    70                                  
    71                                  ;move our number to a r register
    72 0000001A F2440F10F8                movsd xmm15, xmm0
    73                                  
    74                                  
    75 0000001F 66450F2EFF                ucomisd xmm15, xmm15
    76 00000024 7A07                      jp nan
    77 00000026 B801000000                mov rax, 1
    78 0000002B EB05                      jmp exit
    79                                  
    80                                  nan:
    81 0000002D B800000000                mov rax, 0  ;this is a nan
    82                                  
    83                                  exit:
    84                                  ;Restore the original values to the GPRs
    85 00000032 9D                        popf                                                        ;Restore rflags
    86 00000033 415F                      pop        r15                                              ;Restore r15
    87 00000035 415E                      pop        r14                                              ;Restore r14
    88 00000037 415D                      pop        r13                                              ;Restore r13
    89 00000039 415C                      pop        r12                                              ;Restore r12
    90 0000003B 415B                      pop        r11                                              ;Restore r11
    91 0000003D 415A                      pop        r10                                              ;Restore r10
    92 0000003F 4159                      pop        r9                                               ;Restore r9
    93 00000041 4158                      pop        r8                                               ;Restore r8
    94 00000043 5F                        pop        rdi                                              ;Restore rdi
    95 00000044 5E                        pop        rsi                                              ;Restore rsi
    96 00000045 5A                        pop        rdx                                              ;Restore rdx
    97 00000046 59                        pop        rcx                                              ;Restore rcx
    98 00000047 5B                        pop        rbx                                              ;Restore rbx
    99 00000048 5D                        pop        rbp                                              ;Restore rbp
   100                                  
   101 00000049 C3                        ret                                                         ;No parameter with this instruction.  This instruction will pop 8 bytes from
   102                                                                                              ;the integer stack, and jump to the address found on the stack.
   103                                  ;========== End of program fp-io.asm ======================================================================================================================================
   104                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
